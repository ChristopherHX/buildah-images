name: Build Images
on:
  workflow_dispatch:
  push:
    branches:
    - main
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Build Images {0}', github.ref_name) || '' }}
jobs:
  build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Install buildah
      if: false
      run: sudo apt update && sudo apt install buildah
    - name: Checkout runner-images
      uses: actions/checkout@v3
      with:
        repository: actions/runner-images
        ref: main
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Build Image
      run: |
        function exec() {
          $path, $myargs = $args
          $proc=Start-Process -Wait -PassThru -FilePath $path -Args $myargs
          if($proc.ExitCode -ne 0) {
            throw "$args failed with exit code $proc.ExitCode"
          }
        }
        function exec_out() {
          $path, $myargs = $args
          $stdout = "$(& "$path" $myargs)"
          if($LASTEXITCODE -ne 0) {
            throw "$args failed with exit code $LASTEXITCODE, error: $stdout"
          }
          return "$stdout"
        }
        exec buildah login -u ${{ github.actor }} -p ${{ github.token }} ghcr.io
        $manifest = "ghcr.io/${{ github.repository_owner }}/buildah-images:latest".ToLower()
        exec buildah manifest create "$manifest"
        foreach($plat in "linux/amd64","linux/arm64/v8","linux/arm/v7") {
          $containerName = New-Guid
          exec buildah from --format=docker --name "$containerName-container" --platform "$plat" ubuntu:22.04
          $containerpath = exec_out buildah mount "$containerName-container"
          Get-Content "$containerpath/etc/environment"
          Copy-Item "images/linux/toolsets/toolset-2204.json" "$containerpath/imagegeneration/installers/toolset.json"
          exec buildah run -v "$PWD/images/linux/scripts:/scripts" --env HELPER_SCRIPTS=/scripts/helpers --env INSTALLER_SCRIPT_FOLDER=/scripts/installers --env DEBIAN_FRONTEND=noninteractive --env IMAGE_OS=ubuntu22 --env IMAGE_VERSION=dev -- "$containerName-container" bash /scripts/installers/configure-environment.sh
          exec buildah run -v "$PWD/images/linux/scripts:/scripts" --env HELPER_SCRIPTS=/scripts/helpers --env INSTALLER_SCRIPT_FOLDER=/scripts/installers --env DEBIAN_FRONTEND=noninteractive --env IMAGE_OS=ubuntu22 --env IMAGE_VERSION=dev -- "$containerName-container" bash /scripts/installers/apt-vital.sh
          exec buildah run -v "$PWD/images/linux/scripts:/scripts" --env HELPER_SCRIPTS=/scripts/helpers --env INSTALLER_SCRIPT_FOLDER=/scripts/installers --env DEBIAN_FRONTEND=noninteractive --env IMAGE_OS=ubuntu22 --env IMAGE_VERSION=dev -- "$containerName-container" bash /scripts/installers/powershellcore.sh
          exec buildah run -v "$PWD/images/linux/scripts:/scripts" --env HELPER_SCRIPTS=/scripts/helpers --env INSTALLER_SCRIPT_FOLDER=/scripts/installers --env DEBIAN_FRONTEND=noninteractive --env IMAGE_OS=ubuntu22 --env IMAGE_VERSION=dev -- "$containerName-container" pwsh /scripts/installers/Install-PowerShellModules.ps1
          exec buildah run -v "$PWD/images/linux/scripts:/scripts" --env HELPER_SCRIPTS=/scripts/helpers --env INSTALLER_SCRIPT_FOLDER=/scripts/installers --env DEBIAN_FRONTEND=noninteractive --env IMAGE_OS=ubuntu22 --env IMAGE_VERSION=dev -- "$containerName-container" pwsh /scripts/installers/Install-AzureModules.ps1
          Get-Content "$containerpath/etc/environment"
          exec buildah config --env TEST=value "$containerName-container"
          exec buildah unmount "$containerName-container"
          exec buildah commit --format=docker "$containerName-container" "$containerName-image"
          exec buildah manifest add "$manifest" "$containerName-image"
        }
        exec buildah manifest push --all "$manifest" "docker://$manifest"
      shell: buildah unshare pwsh "{0}"
